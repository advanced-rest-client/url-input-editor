/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   url-detailed-editor.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/legacy/class.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-input/paper-input.d.ts" />
/// <reference path="../iron-form/iron-form.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../paper-autocomplete/paper-autocomplete.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../url-parser/url-parser.d.ts" />
/// <reference path="../paper-toggle-button/paper-toggle-button.d.ts" />
/// <reference path="../iron-validatable-behavior/iron-validatable-behavior.d.ts" />

declare namespace UiElements {

  /**
   * `<url-detailed-editor>` Presents a form element that contains a list of
   * URL parameters.
   *
   * The element can be validated as a regular form element.
   *
   * ### Example
   *
   * ```html
   * <url-detailed-editor url="{{url}}" invalid="{{invalid}}"></url-detailed-editor>
   * ```
   *
   * ### Styling
   *
   * `<url-input-editor>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--url-input-editor` | Mixin applied to the element | `{}`
   * `--url-input-editor-add-param-background-color` | Add param button background color | `#2196F3`
   * `--url-input-editor-add-param-color` | Add param button color | `#fff`
   */
  class UrlDetailedEditor extends
    Polymer.IronValidatableBehavior(
    Polymer.Element) {

    /**
     * Current value of the editor.
     */
    value: string|null|undefined;

    /**
     * Computed data model for the view.
     */
    model: object|null|undefined;

    /**
     * List of query parameters model.
     * If not set then it is computed from current URL.
     *
     * Model for query parameters is:
     * - name {String} param name
     * - value {String} param value
     * - enabled {Boolean} is param included into the `value`
     */
    queryParameters: any[]|null|undefined;

    /**
     * A handler that is called on input
     */
    _valueChanged(value: any): void;
    _computeModel(value: any, queryModel: any): void;
    _getHostValue(parser: any): any;
    _computeSearchParams(parser: any, queryModel: any): void;

    /**
     * Finds a search parameter in a parser's model by given name.
     *
     * @param searchParams Model for search params
     * @param name Name of the parameter
     * @returns Search parameter model item
     */
    _findSearchParam(searchParams: any[]|null, name: String|null): Array<String|null>|null;

    /**
     * Searches for a query parameters model by given name.
     *
     * @param model Query parameters model
     * @param name Name of the parameter
     * @returns Model item.
     */
    _findModelParam(model: Array<object|null>|null, name: String|null): object|null;

    /**
     * Updates the value when model changed.
     *
     * @param recordModel Change record for the model
     * @param recordQp Change record for search parameters
     */
    _modelChanged(recordModel: object|null, recordQp: object|null): void;

    /**
     * Updates parser values from change record.
     *
     * @param record Polymer's change record.
     */
    _updateParserValues(record: object|null): void;

    /**
     * Updates `queryParameters` model from change record.
     *
     * @param record Polymer's change record.
     */
    _updateParserSearch(record: object|null): void;
    _updateParserHost(value: any): void;

    /**
     * Called when URL params form has been renederd.
     */
    _onParamsRender(): void;

    /**
     * Adds a new Query Parameter to the list.
     */
    addSearchParam(): void;

    /**
     * Handler for the remove button click.
     */
    _removeSearchParam(e: any): void;

    /**
     * Validates the element.
     */
    _getValidity(): any;
    _ensureEmptyRow(): void;
    _valueFieldLeft(e: any): void;
    _hostKeyDown(e: any): void;
    _hostPaste(e: any): void;

    /**
     * Dispatches the `url-encode` event. The editor handles the action.
     */
    _encodeParameters(): void;

    /**
     * Dispatches the `url-decode` event. The editor handles the action.
     */
    _decodeParameters(): void;
    _closeFocus(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "url-detailed-editor": UiElements.UrlDetailedEditor;
}
